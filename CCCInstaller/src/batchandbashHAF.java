/*  -------------------------------------------------------
 *  batchandbashHAF.java
 *  -------------------------------------------------------
 *  Author:  Matthew Ferlaino
 *  Course:	 COSC2006A
 *  ID:      169657520
 *  Email:   mferlaino@algomau.ca
 *  Date:	 Oct 9, 2018
 *  ------------------------------------------------------- */

// Imports
import java.io.*;

public class batchandbashHAF extends onlineBashScripts {
	// Batch Header & Footer
	public void writeBatchHeader(String path) throws FileNotFoundException, IOException {
		BufferedWriter out = new BufferedWriter(new FileWriter(path, true));
		out.append(":: ####################################################################################################");
		out.newLine();
    	out.append(":: ##                                  COMPOSITE COMPUTING SUITE V1                                  ##");
    	out.newLine();
    	out.append(":: ##                    ###########   ###########   ###########   ####        ##                    ##");
    	out.newLine();
    	out.append(":: ##                    ##            ##            ##       ##   ## ##       ##                    ##");
    	out.newLine();
    	out.append(":: ##                    ##            ##            ##       ##   ##  ##      ##                    ##");
    	out.newLine();
    	out.append(":: ##                    ##            ##            ##       ##   ##   ##     ##                    ##");
    	out.newLine();
    	out.append(":: ##                    #######       #######       ###########   ##    ##    ##                    ##");
    	out.newLine();
    	out.append(":: ##                    ##            ##            ##     ##     ##     ##   ##                    ##");
    	out.newLine();
   		out.append(":: ##                    ##            ##            ##      ##    ##      ##  ##                    ##");
   		out.newLine();
   		out.append(":: ##                    ##            ############  ##        ##  ##        ####                    ##");
   		out.newLine();
   		out.append(":: ##                                                                                                ##");
   		out.newLine();
   		out.append(":: ####################################################################################################");
   		out.newLine();
   		out.append(":: ##### BATCH INSTALLERS ##### WINDOWS OS ##### BY: MATT FERLAINO ##### SUN COMPUTING SINCE '17 ######");
   		out.newLine();
   		out.append(":: ####################################################################################################");
   		out.newLine();
   		out.append("@ECHO OFF");
   		out.newLine();
   		out.append("");
   		out.newLine();
   		out.append(":: Check for permissions");
   		out.newLine();
        out.append(">nul 2>&1 \"%SYSTEMROOT%\\system32\\cacls.exe\" \"%SYSTEMROOT%\\system32\\config\\system\"");
        out.newLine();
        out.append("");
        out.newLine();
  		out.append(":: If error flag set, we do not have admin.");
  		out.newLine();
  		out.append("if '%ERRORLEVEL%' EQU '5' (");
  		out.newLine();
  	    out.append("echo Asking for admin access...");
  	    out.newLine();
  	    out.append("goto UACPrompt");
  	    out.newLine();
  	    out.append(") else ( goto gotAdmin )");
  	    out.newLine();
  	    out.append("");
  	    out.newLine(); 
  	    out.append(":UACPrompt");
  	    out.newLine();
  	    out.append("echo Set UAC = CreateObject^(\"Shell.Application\"^) > \"%TEMP%\\getadmin.vbs\"");
  	    out.newLine();
	    out.append("echo UAC.ShellExecute \"%~s0\", \"\", \"\", \"runas\", 1 >> \"%TEMP%\\getadmin.vbs\""); 
	    out.newLine();
	    out.append("");
	    out.newLine();
	    out.append("\"%TEMP%\\getadmin.vbs\"");
	    out.newLine();
	    out.append("exit /B");
	    out.newLine();
	    out.append("");
	    out.newLine();
	    out.append(":gotAdmin");
	    out.newLine();
	    out.append("if exist \"%TEMP%\\getadmin.vbs\" ( del \"%TEMP%\\getadmin.vbs\" )");
	    out.newLine();
	    out.append("pushd \"%CD%\"");
	    out.newLine();
	    out.append("cd /D \"%~dp0\"");
	    out.newLine();
	    out.append("");
	    out.newLine();
	    out.append(":: Header");
	    out.newLine();
	    out.append("echo ###########   ###########   ###########   ####        ##");
	    out.newLine();
	    out.append("echo ##            ##            ##       ##   ## ##       ##");
	    out.newLine();
	    out.append("echo ##            ##            ##       ##   ##  ##      ##");
	    out.newLine();
	    out.append("echo ##            ##            ##       ##   ##   ##     ##");
	    out.newLine();
	    out.append("echo #######       #######       ###########   ##    ##    ##");
	    out.newLine();
	    out.append("echo ##            ##            ##     ##     ##     ##   ##");
	    out.newLine();
	    out.append("echo ##            ##            ##      ##    ##      ##  ##");
	    out.newLine();
	    out.append("echo ##            ############  ##        ##  ##        ####");
	    out.newLine();
	    out.append("");
	    out.newLine();
	    out.append("echo --------------------");
	    out.newLine();
	    out.append("echo Composite.Computing");
	    out.newLine();
	    out.append("echo By: Matthew Ferlaino");
	    out.newLine();
	    out.append("echo --------------------");
	    out.newLine();
	    out.append("echo");
	    out.newLine();
	    out.append("");
		out.newLine();
		out.newLine();
   		out.close();
	}
	
	public void writeBatchFooter(String path) throws FileNotFoundException, IOException {
		BufferedWriter out = new BufferedWriter(new FileWriter(path, true));
    	out.append(":: Done");
    	out.newLine();
    	out.append("echo -------------------");
    	out.newLine();
    	out.append("echo Composite.Computing");
    	out.newLine();
		out.append("echo -------------------");
		out.newLine();
		out.append("pause");  
		out.newLine();
		out.append("START /b \"\" cmd /c DEL \"%~f0\" && EXIT");  
		out.newLine();
		out.close();
	}
	
	// Bash Header & Footer
	public void writeBashHeader(String path) throws FileNotFoundException, IOException {
		BufferedWriter out = new BufferedWriter(new FileWriter(path, true));
    	out.append("####################################################################################################");
    	out.newLine();
    	out.append("##                                  COMPOSITE COMPUTING SUITE V1                                  ##");
    	out.newLine();
    	out.append("##                    ###########   ###########   ###########   ####        ##                    ##");
    	out.newLine();
    	out.append("##                    ##            ##            ##       ##   ## ##       ##                    ##");
    	out.newLine();
    	out.append("##                    ##            ##            ##       ##   ##  ##      ##                    ##");
    	out.newLine();
    	out.append("##                    ##            ##            ##       ##   ##   ##     ##                    ##");
    	out.newLine();
    	out.append("##                    #######       #######       ###########   ##    ##    ##                    ##");
    	out.newLine();
    	out.append("##                    ##            ##            ##     ##     ##     ##   ##                    ##");
    	out.newLine();
    	out.append("##                    ##            ##            ##      ##    ##      ##  ##                    ##");
    	out.newLine();
    	out.append("##                    ##            ############  ##        ##  ##        ####                    ##");
    	out.newLine();
    	out.append("##                                                                                                ##");
    	out.newLine();
    	out.append("####################################################################################################");
    	out.newLine();
    	out.append("##### BASH INSTALLERS ##### WINDOWS OS ##### BY: MATT FERLAINO ##### SUN COMPUTING SINCE '17 #######");
    	out.newLine();
    	out.append("####################################################################################################");
    	out.newLine();
    	out.append("#!/bin/bash");
    	out.newLine();
    	out.append("");
    	out.newLine();
    	out.append("# Ensure we are being ran as root");
    	out.newLine();
    	out.append("echo \"Asking for admin access...\"");
    	out.newLine();
    	out.append("sudo -v");
    	out.newLine();
    	out.append("");
    	out.newLine();
    	out.append("echo");
    	out.newLine();
    	out.append("cat << \"Header\"");
    	out.newLine();
    	out.append("###########   ###########   ###########   ####        ## ");
    	out.newLine();
    	out.append("##            ##            ##       ##   ## ##       ##");
    	out.newLine();
    	out.append("##            ##            ##       ##   ##  ##      ##");
    	out.newLine();
    	out.append("##            ##            ##       ##   ##   ##     ##");
    	out.newLine();
    	out.append("#######       #######       ###########   ##    ##    ##");
    	out.newLine();
    	out.append("##            ##            ##     ##     ##     ##   ##");
    	out.newLine();
    	out.append("##            ##            ##      ##    ##      ##  ##");
    	out.newLine();
    	out.append("##            ############  ##        ##  ##        ####");
    	out.newLine();
    	out.append("--------------------");
    	out.newLine();
    	out.append("Composite.Computing");
    	out.newLine();
    	out.append("By: Matthew Ferlaino");
    	out.newLine();
    	out.append("--------------------");
    	out.newLine();
    	out.append("Header");
    	out.newLine();
    	out.append("");
    	out.newLine();
    	out.append("# Cleanup Commands");
    	out.newLine();
    	out.append("defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true");
    	out.newLine();
    	out.append("defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1");
    	out.newLine();
    	out.append("defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1");
    	out.newLine();
    	out.append("defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadCornerSecondaryClick -int 2");
    	out.newLine();
    	out.append("defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadRightClick -bool true");
    	out.newLine();
    	out.append("defaults -currentHost write NSGlobalDomain com.apple.trackpad.trackpadCornerClickBehavior -int 1");
    	out.newLine();
    	out.append("defaults -currentHost write NSGlobalDomain com.apple.trackpad.enableSecondaryClick -bool true");
    	out.newLine();
    	out.append("defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool true");
    	out.newLine();
    	out.append("defaults write com.apple.finder ShowHardDrivesOnDesktop -bool true");
    	out.newLine();
    	out.append("defaults write com.apple.finder ShowMountedServersOnDesktop -bool true");
    	out.newLine();
    	out.append("defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool true");
    	out.newLine();
    	out.append("defaults write com.apple.finder QLEnableTextSelection -bool true");
    	out.newLine();
    	out.append("/usr/libexec/PlistBuddy -c \"Set :DesktopViewSettings:IconViewSettings:arrangeBy grid\" ~/Library/Preferences/com.apple.finder.plist");
    	out.newLine();
    	out.append("/usr/libexec/PlistBuddy -c \"Set :StandardViewSettings:IconViewSettings:arrangeBy grid\" ~/Library/Preferences/com.apple.finder.plist");
    	out.newLine();
    	out.append("defaults write com.apple.dock show-process-indicators -bool true");
    	out.newLine();
    	out.append("defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true");
    	out.newLine();
    	out.append("defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true");
    	out.newLine();
    	out.append("defaults write com.apple.finder FXDefaultSearchScope -string \"SCcf\"");
    	out.newLine();
    	out.append("defaults write com.apple.finder QLEnableTextSelection -bool true");
    	out.newLine();
    	out.append("defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true");
    	out.newLine();
    	out.append("defaults write com.apple.dock enable-spring-load-actions-on-all-items -bool true");
    	out.newLine();
    	out.append("defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true");
    	out.newLine();
    	out.append("defaults write com.apple.menuextra.battery ShowPercent -string \"YES\"");
    	out.newLine();
    	out.append("defaults write com.apple.Preview NSQuitAlwaysKeepsWindows -bool false");
    	out.newLine();
    	out.append("defaults write com.apple.QuickTimePlayerX NSQuitAlwaysKeepsWindows -bool false");
    	out.newLine();
    	out.append("defaults write com.apple.finder NewWindowTarget -string \"PfHm\"");
    	out.newLine();
    	out.append("defaults write com.apple.finder NewWindowTargetPath -string \"file://${HOME}/\"");
    	out.newLine();
    	out.append("defaults write com.apple.driver.AppleBluetoothMultitouch.mouse MouseButtonMode -string TwoButton");
    	out.newLine();
    	out.append("defaults write com.apple.Safari FindOnPageMatchesWordStartsOnly -bool false");
    	out.newLine();
    	out.append("defaults write com.apple.loginwindow LoginwindowLaunchesRelaunchApps -bool false");
    	out.newLine();
    	out.append("sudo tmutil disablelocal > /dev/null 2>&1");
    	out.newLine();
    	out.append("");
    	out.newLine();
    	out.newLine();
   		out.close();
	}
	
	public void writeBashFooter(String path) throws FileNotFoundException, IOException {
		BufferedWriter out = new BufferedWriter(new FileWriter(path, true));
		out.append("# Cleanup");
		out.newLine();
		out.append("sudo killall Dock");
		out.newLine();
		out.append("sudo killall Finder");
		out.newLine();
		out.newLine();
		out.append("# Perform macOS updates");
		out.newLine();
		out.append("read -p \"Press any key to begin updating macOS...\"");
		out.newLine();
		out.append("sudo softwareupdate -ia > /dev/null 2>&1");
		out.newLine();
		out.newLine();
    	out.append("# Done");
    	out.newLine();
    	out.append("echo \"-------------------\"");
    	out.newLine();
    	out.append("echo \"Composite.Computing\"");
    	out.newLine();
		out.append("echo \"-------------------\"");
		out.newLine();
		out.append("read -p \"Done installation & update process, press any key to continue...\"");  
		out.newLine();
    	out.append("sudo rm -rf \"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )/Installer.sh\" >& /dev/null");
    	out.newLine();
		out.append("clear");
		out.newLine();
		out.append("exit");
		out.newLine();
		out.close();
	}
}
